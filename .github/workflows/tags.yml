name: tags

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  #devide in test, build, lint, create release, upload artifacts, etc
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
  release:
    name: release
    needs: [create_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: macos-latest
          rust-target: x86_64-apple-darwin
        - os: ubuntu-latest
          rust-target: x86_64-unknown-linux-gnu
        - os: windows-latest
          rust-target: x86_64-pc-windows-gnu
    steps:
    - name: Checkout project
      uses: actions/checkout@v2
    - name: Install Rust with cargo
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.rust-target }}
    - name: Run unit tests
      run: cargo test --verbose
#    - name: Run integration tests
#      run: cargo test -- --include-ignored
    - name: Build
      run: cargo build --release --target ${{ matrix.rust-target }}
    - name: Set RELEASE_VERSION
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Build archive
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          archive_name="mcf-${{ env.RELEASE_VERSION }}${{ matrix.rust-target }}.zip"
          cd target/${{ matrix.rust-target }}/release/
          7z a "$archive_name" "mcf.exe"
          echo "ASSET=$archive_name" >> $GITHUB_ENV
        else
          archive_name="mcf-${{ env.RELEASE_VERSION }}${{ matrix.rust-target }}.tar.gz"
          cd target/${{ matrix.rust-target }}/release/
          tar czf "$archive_name" "mcf"
          echo "ASSET=$archive_name" >> $GITHUB_ENV
        fi
    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream